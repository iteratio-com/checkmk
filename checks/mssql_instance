#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2020             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<mssql_instance:sep(124)>>>
# MSSQL_MSSQLSERVER|config|10.50.1600.1|Enterprise Edition|BLABLA
# <<<mssql_instance:sep(124)>>>
# MSSQL_SQLEXPRESS|config|10.50.1600.1|Express Edition|
# <<<mssql_instance:sep(124)>>>
# MSSQL_MICROSOFT##SSEE|config|9.00.5000.00|Windows Internal Database|
# <<<mssql_instance:sep(124)>>>
# MSSQL_MSSQLSERVER|state|0|[DBNETLIB][ConnectionOpen (Connect()).]SQL Server existiert nicht oder Zugriff verweigert.
# <<<mssql_instance:sep(124)>>>
# MSSQL_SQLEXPRESS|state|1|[DBNETLIB][ConnectionOpen (Connect()).]SQL Server existiert nicht oder Zugriff verweigert.
# <<<mssql_instance:sep(124)>>>
# MSSQL_MICROSOFT##SSEE|state|0|[DBNETLIB][ConnectionOpen (Connect()).]SQL Server existiert nicht oder Zugriff verweigert.

# <<<mssql_instance:sep(124)>>>
# ERROR: Failed to gather SQL server instances

factory_settings["mssql_instances_default_levels"] = {"cluster_status": "best"}


def parse_mssql_instance(info):
    def _parse_prod_version(entry):
        if entry.startswith("8."):
            version = "2000"
        elif entry.startswith("9."):
            version = "2005"
        elif entry.startswith("10.0"):
            version = "2008"
        elif entry.startswith("10.50"):
            version = "2008R2"
        elif entry.startswith("11."):
            version = "2012"
        elif entry.startswith("12."):
            version = "2014"
        elif entry.startswith("13."):
            version = "2016"
        elif entry.startswith("14."):
            version = "2017"
        elif entry.startswith("15."):
            version = "2019"
        else:
            return "unknown[%s]" % entry
        return "Microsoft SQL Server %s" % version

    parsed = {}

    for line in info:
        if line[1].startswith("ERROR:") or len(line) < 2 or line[2] not in [
                "config", "state", "details"
        ]:
            continue
        elif line[1][:6] == "MSSQL_":
            # Remove the MSSQL_ prefix from the ID for this check
            instance_id = line[1][6:]
        else:
            instance_id = line[1]

        instance = parsed.setdefault(instance_id, {})
        error_msg = ""

        # Instance-Name
        if line[0] is None:
            name = ""
        else:
            name = line[0] + ":"

        # Filling error_msg to have an output for each instance
        if line[3] == "1":
            error_msg += name + "OK"
        else:
            error_msg += name + "|".join(line[4:])

        if line[2] == "config":
            instance.update({
                "version_info": "%s - %s" % (line[3], line[4]),
                "cluster_name": line[5],
            })

        elif line[2] == "state":
            if "state" in instance:
                state = instance.get("state") + ";" + line[3]
            else:
                state = line[3]
            if "error_msg" in instance:
                error_msg = instance.get("error_msg") + ";" + error_msg

            instance.update({
                "state": state,
                "error_msg": error_msg,
            })

        # Still in use? Not in script!
        elif line[2] == "details":
            _parse_prod_version(line[3])
            instance.update({
                "prod_version_info": "%s (%s) (%s) - %s" %
                                     (_parse_prod_version(line[3]), line[4], line[3], line[5])
            })
    return parsed


@get_parsed_item_data
def check_mssql_instance(item, params, data):
    instance_state = data.get("state").split(";")

    if params is None:
        params = {}

    state_map = params.get("map_connection_state")
    cluster_status = params.get("cluster_status", "best")
    state = 0

    if cluster_status == 'best' or not isinstance(instance_state, list):
        state = 0 if "1" in instance_state else 2
    elif cluster_status == 'worst':
        state = 2 if "0" in instance_state else 0
    else:
        state = 2

    if state_map != None:
        state = state_map

    yield state, "state: " + data["error_msg"].replace(';', ', ')

    yield 0, "Version: %s" % data.get("prod_version_info", data["version_info"])

    if data["cluster_name"] != "":
        yield 0, "clustered as %s" % data["cluster_name"]


check_info["mssql_instance"] = {
    'parse_function': parse_mssql_instance,
    'check_function': check_mssql_instance,
    'inventory_function': discover(),
    'default_levels_variable': "mssql_instances_default_levels",
    'service_description': 'MSSQL %s Instance',
    'group': 'mssql_instance',
    'node_info': True,
}
